/***
 * THIS FILE IS AUTOMATICALLY GENERATED
 * Do not edit this file. It will be overwritten when the configure script is run.
 ***/

 void O3_CPU::impl_initialize_branch_predictor()
{
  if (bpred_type[champsim::lg2(bbranchDhashed_perceptron)]) bpred_branchDhashed_perceptron_initialize_branch_predictor();
}

 void O3_CPU::impl_last_branch_result(uint64_t ip, uint64_t target, uint8_t taken, uint8_t branch_type)
{
  if (bpred_type[champsim::lg2(bbranchDhashed_perceptron)]) bpred_branchDhashed_perceptron_last_branch_result(ip, target, taken, branch_type);
}

 uint8_t O3_CPU::impl_predict_branch(uint64_t ip)
{
  uint8_t result{};
  std::bit_or<decltype(result)> joiner{};
  if (bpred_type[champsim::lg2(bbranchDhashed_perceptron)]) result = joiner(result, bpred_branchDhashed_perceptron_predict_branch(ip));
  return result;
}

 void O3_CPU::impl_initialize_btb()
{
  if (btb_type[champsim::lg2(tbtbDbasic_btb)]) btb_btbDbasic_btb_initialize_btb();
}

 void O3_CPU::impl_update_btb(uint64_t ip, uint64_t predicted_target, uint8_t taken, uint8_t branch_type)
{
  if (btb_type[champsim::lg2(tbtbDbasic_btb)]) btb_btbDbasic_btb_update_btb(ip, predicted_target, taken, branch_type);
}

 std::pair<uint64_t, uint8_t> O3_CPU::impl_btb_prediction(uint64_t ip)
{
  std::pair<uint64_t, uint8_t> result{};
  ::take_last<decltype(result)> joiner{};
  if (btb_type[champsim::lg2(tbtbDbasic_btb)]) result = joiner(result, btb_btbDbasic_btb_btb_prediction(ip));
  return result;
}

 void CACHE::impl_initialize_replacement()
{
  if (repl_type[champsim::lg2(rreplacementDlru)]) repl_replacementDlru_initialize_replacement();
}

 uint32_t CACHE::impl_find_victim(uint32_t triggering_cpu, uint64_t instr_id, uint32_t set, const BLOCK* current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
  uint32_t result{};
  ::take_last<decltype(result)> joiner{};
  if (repl_type[champsim::lg2(rreplacementDlru)]) result = joiner(result, repl_replacementDlru_find_victim(triggering_cpu, instr_id, set, current_set, ip, full_addr, type));
  return result;
}

 void CACHE::impl_update_replacement_state(uint32_t triggering_cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
  if (repl_type[champsim::lg2(rreplacementDlru)]) repl_replacementDlru_update_replacement_state(triggering_cpu, set, way, full_addr, ip, victim_addr, type, hit);
}

 void CACHE::impl_replacement_final_stats()
{
  if (repl_type[champsim::lg2(rreplacementDlru)]) repl_replacementDlru_replacement_final_stats();
}

 void CACHE::impl_prefetcher_initialize()
{
  if (pref_type[champsim::lg2(pprefetcherD4offset)]) pref_prefetcherD4offset_prefetcher_initialize();
  if (pref_type[champsim::lg2(pprefetcherDno)]) pref_prefetcherDno_prefetcher_initialize();
  if (pref_type[champsim::lg2(pprefetcherDno_instr)]) ipref_prefetcherDno_instr_prefetcher_initialize();
}

 uint32_t CACHE::impl_prefetcher_cache_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
  uint32_t result{};
  std::bit_xor<decltype(result)> joiner{};
  if (pref_type[champsim::lg2(pprefetcherD4offset)]) result = joiner(result, pref_prefetcherD4offset_prefetcher_cache_operate(addr, ip, cache_hit, type, metadata_in));
  if (pref_type[champsim::lg2(pprefetcherDno)]) result = joiner(result, pref_prefetcherDno_prefetcher_cache_operate(addr, ip, cache_hit, type, metadata_in));
  if (pref_type[champsim::lg2(pprefetcherDno_instr)]) result = joiner(result, ipref_prefetcherDno_instr_prefetcher_cache_operate(addr, ip, cache_hit, type, metadata_in));
  return result;
}

 uint32_t CACHE::impl_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  uint32_t result{};
  std::bit_xor<decltype(result)> joiner{};
  if (pref_type[champsim::lg2(pprefetcherD4offset)]) result = joiner(result, pref_prefetcherD4offset_prefetcher_cache_fill(addr, set, way, prefetch, evicted_addr, metadata_in));
  if (pref_type[champsim::lg2(pprefetcherDno)]) result = joiner(result, pref_prefetcherDno_prefetcher_cache_fill(addr, set, way, prefetch, evicted_addr, metadata_in));
  if (pref_type[champsim::lg2(pprefetcherDno_instr)]) result = joiner(result, ipref_prefetcherDno_instr_prefetcher_cache_fill(addr, set, way, prefetch, evicted_addr, metadata_in));
  return result;
}

 void CACHE::impl_prefetcher_cycle_operate()
{
  if (pref_type[champsim::lg2(pprefetcherD4offset)]) pref_prefetcherD4offset_prefetcher_cycle_operate();
  if (pref_type[champsim::lg2(pprefetcherDno)]) pref_prefetcherDno_prefetcher_cycle_operate();
  if (pref_type[champsim::lg2(pprefetcherDno_instr)]) ipref_prefetcherDno_instr_prefetcher_cycle_operate();
}

 void CACHE::impl_prefetcher_final_stats()
{
  if (pref_type[champsim::lg2(pprefetcherD4offset)]) pref_prefetcherD4offset_prefetcher_final_stats();
  if (pref_type[champsim::lg2(pprefetcherDno)]) pref_prefetcherDno_prefetcher_final_stats();
  if (pref_type[champsim::lg2(pprefetcherDno_instr)]) ipref_prefetcherDno_instr_prefetcher_final_stats();
}

 void CACHE::impl_prefetcher_branch_operate(uint64_t ip, uint8_t branch_type, uint64_t branch_target)
{
  if (pref_type[champsim::lg2(pprefetcherD4offset)]) pref_prefetcherD4offset_prefetcher_branch_operate(ip, branch_type, branch_target);
  if (pref_type[champsim::lg2(pprefetcherDno)]) pref_prefetcherDno_prefetcher_branch_operate(ip, branch_type, branch_target);
  if (pref_type[champsim::lg2(pprefetcherDno_instr)]) ipref_prefetcherDno_instr_prefetcher_branch_operate(ip, branch_type, branch_target);
}
