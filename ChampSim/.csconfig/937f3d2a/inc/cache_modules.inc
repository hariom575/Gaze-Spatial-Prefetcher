/***
 * THIS FILE IS AUTOMATICALLY GENERATED
 * Do not edit this file. It will be overwritten when the configure script is run.
 ***/

constexpr static std::size_t NUM_REPLACEMENT_MODULES = 1;
constexpr static unsigned long long rreplacementDlru = 1ull << 0;

[[]] void repl_replacementDlru_initialize_replacement();
[[]] void impl_initialize_replacement();

[[nodiscard]] uint32_t repl_replacementDlru_find_victim(uint32_t, uint64_t, uint32_t, const BLOCK*, uint64_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t impl_find_victim(uint32_t, uint64_t, uint32_t, const BLOCK*, uint64_t, uint64_t, uint32_t);

[[]] void repl_replacementDlru_update_replacement_state(uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, uint8_t);
[[]] void impl_update_replacement_state(uint32_t, uint32_t, uint32_t, uint64_t, uint64_t, uint64_t, uint32_t, uint8_t);

[[]] void repl_replacementDlru_replacement_final_stats();
[[]] void impl_replacement_final_stats();

constexpr static std::size_t NUM_PREFETCH_MODULES = 3;
constexpr static unsigned long long pprefetcherDgaze_analysis_pht = 1ull << 0;
constexpr static unsigned long long pprefetcherDno                = 1ull << 1;
constexpr static unsigned long long pprefetcherDno_instr          = 1ull << 2;

[[]] void pref_prefetcherDgaze_analysis_pht_prefetcher_initialize();
[[]] void pref_prefetcherDno_prefetcher_initialize();
[[]] void ipref_prefetcherDno_instr_prefetcher_initialize();
[[]] void impl_prefetcher_initialize();

[[nodiscard]] uint32_t pref_prefetcherDgaze_analysis_pht_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, uint8_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDno_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, uint8_t, uint32_t);
[[nodiscard]] uint32_t ipref_prefetcherDno_instr_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, uint8_t, uint32_t);
[[nodiscard]] uint32_t impl_prefetcher_cache_operate(uint64_t, uint64_t, uint8_t, uint8_t, uint32_t);

[[nodiscard]] uint32_t pref_prefetcherDgaze_analysis_pht_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t pref_prefetcherDno_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t ipref_prefetcherDno_instr_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);
[[nodiscard]] uint32_t impl_prefetcher_cache_fill(uint64_t, uint32_t, uint32_t, uint8_t, uint64_t, uint32_t);

[[]] void pref_prefetcherDgaze_analysis_pht_prefetcher_cycle_operate();
[[]] void pref_prefetcherDno_prefetcher_cycle_operate();
[[]] void ipref_prefetcherDno_instr_prefetcher_cycle_operate();
[[]] void impl_prefetcher_cycle_operate();

[[]] void pref_prefetcherDgaze_analysis_pht_prefetcher_final_stats();
[[]] void pref_prefetcherDno_prefetcher_final_stats();
[[]] void ipref_prefetcherDno_instr_prefetcher_final_stats();
[[]] void impl_prefetcher_final_stats();


// Assert data prefetchers do not operate on branches
[[noreturn]] void pref_prefetcherDgaze_analysis_pht_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }
[[noreturn]] void pref_prefetcherDno_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t) { throw std::runtime_error("Not implemented"); }
[[]] void ipref_prefetcherDno_instr_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t);
[[]] void impl_prefetcher_branch_operate(uint64_t, uint8_t, uint64_t);
